interface Send {
  value: Float
}

type Address {
  address: ID!
  totalValue: Float
  funcName: String
  count: Int
  desc: String
}

type Node {
  id: String
  totalValue: Float
  count: Int
  funcName: String
}

type Link {
  source: String
  target: String
}

type Graph {
  nodes: [Node]
  links: [Link]
}

input CreateAddressInput {
  address: String
  totalValue: Float
  desc: String
}

type Query {
  getAddresses: [Address]
  getAddress(address: ID!): Address
  getGraph(limit: Int): Graph
  searchGraph(id: ID!, limit: Int): Graph
}

type Mutation {
  createAddress(createAddressInput: CreateAddressInput): Address
}
